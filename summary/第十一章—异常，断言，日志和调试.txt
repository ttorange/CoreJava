Java程序运行过程中所发生的异常事件可分为两类：
Error:  JVM系统内部错误、资源耗尽等严重情况
Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，例如：
空指针访问
试图读取不存在的文件
网络连接中断
Java程序运行过程中所发生的异常事件可分为两类：
Error:  JVM系统内部错误、资源耗尽等严重情况
Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，例如：
空指针访问
试图读取不存在的文件
网络连接中断

异常类层次
    Throwable:Error(linkError,VirturalMachineError,AWTError...)
              Exception(RuntimeException:错误的类型转换,数组下标越界,空指针访问
                        IOException:从一个不存在的文件中读取数据,越过文件结尾继续读取,连接一个不存在的URL
)

Java异常处理：Java采用异常处理机制，将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁，并易于维护。

Java提供的是异常处理的抓抛模型。
Java程序的执行过程中如出现异常，会自动生成一个异常类对象，该异常对象将被提交给Java运行时系统，这个过程称为抛出(throw)异常。
如果一个方法内抛出异常，该异常会被抛到调用方法中。如果异常没有在调用方法中处理，它继续被抛给这个调用方法的调用者。这个过程将一直继续下去，直到异常被处理。这一过程称为捕获(catch)异常。
如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。
程序员通常只能处理Exception，而对Error无能为力。

异常处理是通过try-catch-finally语句实现的。

try
{
	......	//可能产生异常的代码
}
catch( ExceptionName1 e )
{
	......	//当产生ExceptionName1型异常时的处置措施
}
catch( ExceptionName2 e )
{
...... 	//当产生ExceptionName2型异常时的处置措施
}  
[ finally{
......	 //无条件执行的语句
		}  ]

catch的每个异常小范围异常要放在大范围异常的前面否则代码会报错（即父类异常放在后面）

用户自定义异常类MyException，用于描述数据取值范围错误信息。用户自己的异常类必须继承现有的异常类。

class MyException extends Exception {
   	private int idnumber;
 	public MyException(String message, int id) {
		super(message);
		this.idnumber = id;
 	} 
	public int getId() {
		return idnumber;
 	}
}


声明抛出异常是Java中处理异常的第二种方式
如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显式地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。
在方法声明中用 throws 子句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。
声明抛出异常举例：
	public void readFile(String file)  throws FileNotFoundException {
		……
		// 读文件的操作可能产生FileNotFoundException类型的异常
		FileInputStream fis = new FileInputStream(file);
		 ..……
     }

