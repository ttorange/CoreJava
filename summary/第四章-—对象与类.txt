第四章--对象与类
  面向对象概述
      类的关系：依赖（use-a） 聚合（has-a） 继承（is-a）

  使用预定义类（Date String Math）

  用户自定义类（构造器、显示参数与隐式参数（this关键字）、封装、访问权限、私有方法、final实例域）
  
  静态域与静态方法
      静态域：每个对象度自己的实例域都有一份自己的拷贝，它属于类，但不属于任何独立的对象
      静态成员  不用创建对象就可以访问静态成员（比如Math().PI）
      静态常量：static final
      静态方法：不能像对象实施操作的方法   不用创建对象就可以直接调用比如Math.sqrt()
               静态方法不能以任何方式引用this和super关键字。
               因为静态方法在使用前不用创建任何实例对象，当静态方法被调用时，this所引用的对象根本就没有产生。
      静态初始化：一个类中可以使用不包含在任何方法体中的静态代码块(static block )，
               当类被载入时，静态代码块被执行，且只被执行一次，
               静态块经常用来进行类属性的初始化。

               使用场景 1)不需要访问对象状态，所需参数都是显示参数提供2）一个方法只需访问类的静态域
                用于工厂方法
    
      final：final标记的变量(成员变量或局部变量)即成为常量，只能赋值一次。
             final标记的类不能被继承。提高安全性，提高程序的可读性。
             final标记的方法不能被子类重写。增加安全性。
             final标记的成员变量必须在声明的同时或在每个构造方法中显式赋值，然后才能使用。
	   final PI=3.14;
  对象的构造（重载、初始化、无参数构造器、显式域初始化、参数名、调用另一个构造器（this））
             java中方法参数总是按值调用
             
  包  
    发生不同包函数冲突，写出全名
  类路径
     要使类被多个程序共享 需要将这个类文件放在/home/user/classdir/com/horstmann/corejava中
                          将JAR放在一个目录中
                          设置类路径
  注释 //@...
  类的设计技巧
   1)保证数据私有
   2）对数据初始化
   3）不要在类中使用过多数据类型
   4）不是所有的域都需要独立的域访问器和更改器
   5）将职责过多的类进行分解
   6）类名，方法名要体现其职责
   