https://blog.csdn.net/briblue/article/details/76736356

泛型代码和虚拟机：
   虚拟机中没有泛型类型对象。自动提供原始类型，――擦除类型变量
   原始类型有限定就用限定变量来替换，没有就用Object代替
    public class Interval <T extend Comarable&Serializable>implements Serializable
    原始类型T会被Comparable替换

     翻译泛型表达式：
         程序调用泛型方法时，如果擦除返回类型，编译器插入强制类型转换
     翻译泛型方法：
          类型擦除在泛型方法中，擦除后多态性导致的冲突，虚拟机中用参数和返回类型确定一个方法

     虚拟机中没有泛型，只有普通类和方法
     所有的类型参数都用他们的限定类型替换
     桥方法被合成类保持多态
     为保持类型安全性，必要时插入强制类型转换

     调用遗留代码

约束与局限性
      不能用基本类型实例化类型参数
      运行时类型查询只适用于原始类型
               a instanceof Pair<String>  报错
               Pair<String>.getClass() 将返回Pair.class
      不能创建参数化类型的数组
               不能实例化参数化类型的数组Pair<String> table=new Pair<String>[10];  报错
      Varargs警告
      不能实例化类型变量              
              不能使用new T(...)或T.class这样的表达式
               Pair<T>构造器  public Pair(){first=new T()}非法。因为擦除类型后都是Object
       禁止使用带变量类型的静态域和方法
       不能抛出或捕获泛型类的实例
       注意擦除后的冲突
       泛型类的继承规则
           泛型下类间原有继承关系不存在
      通配符类型    

       Pair<? extends Employee>表示任何泛型Pair类型，类型参数是 Employee的子类比如Pair<Manager>
       Pair<?super Manager>通配符限制为Manager所有的超类
       Pair<?>无限定通配符，任意Object对象都可以调用Pair类的setObject
反射和泛型
    虚拟机中的泛型类型信息
        





